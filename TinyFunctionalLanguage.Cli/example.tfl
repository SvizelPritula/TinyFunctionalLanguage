struct Node {
    value: int;
    next: List;
}

struct List {
    has_root: bool;
    root: Node;
}

func empty(): List {
    List(false, null Node)
}

func add(list: List, value: int): List {
    List(true, Node(value, list))
}

struct ExtractResult {
    value: int;
    rest: List;
}

func extract_max(node: Node): ExtractResult {
    if !node.next.has_root {
        ExtractResult(node.value, empty())
    } else {
        let result = extract_max(node.next.root);

        if node.value > result.value {
            ExtractResult(node.value, node.next)
        } else {
            ExtractResult(result.value, add(result.rest, node.value))
        }
    }
}

func sort(list: List): List {
    let sorted = empty();

    while list.has_root {
        let result = extract_max(list.root);
        list = result.rest;
        sorted = add(sorted, result.value);
    };

    sorted
}

func main(): bool {
    let list = empty();

    list = add(list, 1);
    list = add(list, 3);
    list = add(list, 4);
    list = add(list, 2);

    let reference = empty();

    reference = add(reference, 4);
    reference = add(reference, 3);
    reference = add(reference, 2);
    reference = add(reference, 1);

    sort(list) == reference
}
